Setting up Kiosks for Windows 8 && 10 
-------------------------------------

Goals:
  * Set up and configure secure kiosk 
  * Kiosk should be running Google Chrome
  * User should not be able to exit the browser or do anything else on PC

Options:
  1. Group Policy && Batch Files
  2. Assigned Access
  3. Shell Launcher

Notes:
  * You cannot configure Assigned Access and Shell Launcher on the same system.

Application Types:
  * Win32 - Classic Windows
  * UWP   - Universal Windows Platform (Windows Store apps)

=======================================

1. Group Policy && Batch Files
------------------------------

Configured similarly to the help document for Windows 8

Create a local user as a non admin account and use mmc to configure a group policy object for the user.

Microsoft Management Console:
  * add a Group Policy Object
  * set up restrictions for the user account
  * run kioskbootstrap.bat at user logon
      windows settings -> scripts -> logon -> add the batch files

=======================================

2.1 Assigned Access (UWP)
-------------------

Requirements:
  Windows 10 Enterprise, Windows 10 Education, or Windows 10 Pro

Location:
  windows 8  : pc settings -> accounts -> other accounts -> set up account for assigned access
  windows 10 : settings -> accounts -> other people -> set up assigned access

Options:
  choose an account to use - non admin account
  choose an app to use     - must be a windows store app

Exit:
  windows 8  : press Windows key 5 times
  windows 10 : press Ctrl + Alt + Del 

note:
  some apps might not show up in the list of choices.
  if that happens, use PowerShell for manual set up.
  
=======================================

2.2 PowerShell set up Assigned Access (UWP)
-------------------------------------

NAME
    Set-AssignedAccess

SYNTAX
    Set-AssignedAccess -AppName <String> -UserName <String> [-Confirm] [-WhatIf] [<CommonParameters>]
    
    Set-AssignedAccess -AppName <String> -UserSID <String> [-Confirm] [-WhatIf] [<CommonParameters>]
    
    Set-AssignedAccess -AppUserModelId <String> -UserName <String> [-Confirm] [-WhatIf] [<CommonParameters>]
    
    Set-AssignedAccess -AppUserModelId <String> -UserSID <String> [-Confirm] [-WhatIf] [<CommonParameters>]
    
DESCRIPTION
    The Set-AssignedAccess cmdlet configures the specified user account so that it can use only one Windows Store app. 
	The user cannot exit the app, sign out, or access any system settings.
	
undo:
    To remove assigned access, using PowerShell, run the following cmdlet.
	Clear-AssignedAccess

note:
    to use Set-AssignedAccess need to know 1. (UserName or UserSID), and 2. (AppName or AppUserModelId)
	1. to find a UserSID use PowerShell command "Get-WmiObject win32_useraccount"
    2. to find an AppUserModelId use the listAumids method from Microsoft documentation.
       (run the printAumids.ps1 script in the util folder, it prints a txt file with every Aumid)
	  
=======================================

3. Shell Launcher  (Win32)
-----------------

Requirements:
  Windows 10 Enterprise or Windows 10 Education

Shell Launcher is an optional component and is not turned on by default in Windows 10. 
It must be turned on prior to configuring.

Restrictions:
  * cannot use Eshell.exe as a custom shell 
  * cannot use a Universal Windows app as a custom shell
  * cannot use a custom shell to launch Universal Windows apps
  * cannot use an application that launches a different process and exits as a custom shell

Enable: To make the setting available to the device and optionally apply the settings to the device.
  * Control Panel -> programs and features -> turn windows features on or off
  * WESL_UserSetting
  * DISM
  * Windows Configuration Designer
  (used control panel, could not get DISM script running)	
	
Configure: To customize the setting or sub-settings.
  * Assigned Access Configuration Service Provider (CSP)
  * Use the Shell Launcher WMI providers directly in a PowerShell script or application

Script: 
  * start with the default template and modify to fit needs

note: 
  * changing the shell settings can break the functionality of the operating system
  * if try running on non-Enterprise or non-Education then will load to a basically unusable black screen with no taskbar
 
=======================================

4. xxxx
-------

xxxx

=======================================

Conclusion
----------

* Group Policy && Batch Files is a partially complete solution, it allows a minimized Chrome window to be run and respawned.
  However, it requires much manual configuration, and the system is not 100% in a "lockdown" mode. Many things can be restricted
  or hidden, but it seems like some things can't be disabled so easily.  eg: user can access taskbar through Windows button, etc

* Assigned Access is not practical since it only works with UWP apps, and because Google Chrome a Win32 app, it cannot be used.
  However, Microsoft Edge can be used with Assigned Access.

* Shell Launcher would be practical if running on Enterprise or Education distributions of Windows.

=======================================

