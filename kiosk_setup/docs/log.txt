Setting up Internet Kiosks for Windows 
---------------------------------------

Goals:
  * Set up and configure a secure internet kiosk 
  * Kiosk should be running Google Chrome
  * Browser caching should be disabled
  * Start page destination -> https://chassintranet.ucr.edu/saas2/advisor
  * User should not be able to exit the browser or do anything else on PC

Options:
  1. Group Policy && Scripts
  2. Assigned Access
  3. Shell Launcher

Notes:
  * Some of these methods only work with one type of application (Win32 or UWP).
  * Some of these methods only work with specific versions of Windows (8.1 and 10)
  * Some of these methods only work with specific editions of Windows (RT, Pro, Education, Enterprise, etc...).
  * You cannot configure Assigned Access and Shell Launcher on the same system.
  * Assigned Access is not available for Windows 7 since it is specific to Windows 8.1 and 10.
  * Shell Launcher is not available for Windows 8.1 since it is specific to Windows 10.

Application Types:
  * Win32 - Classic Windows
  * UWP   - Universal Windows Platform (Windows Store apps)

=======================================

1. Group Policy && Scripts (Win32)
--------------------------

Probably the most flexible option in terms of what can be done.
Browser application can be launched by custom scripts with Command Prompt, PowerShell, VBScript, etc...
Group Policies can be configured similarly to our already existing Windows 8.1 help document.

Steps:
  * Create a local user as a non admin account
  * Use MMC to configure a group policy object for the user

Microsoft Management Console:
  * Add a Group Policy Object
  * Set up restrictions for the user account
  * Run script at user logon
      Windows settings -> Scripts -> Logon -> Add the script files

Note:
  There is no standard way to launch UWP apps from the command line.      

=======================================

2.1 Assigned Access (UWP)
-------------------

Requirements:
  Windows 8.1 - RT, Pro, or Enterprise
  Windows 10  - Pro, Education, or Enterprise

Location:
  Windows 8.1 - PC settings -> Accounts -> Other accounts -> Set up account for assigned access
  Windows 10  - Settings    -> Accounts -> Other people   -> Set up assigned access

Options:
  Choose an account to use - non admin account
  Choose an app to use     - must be a UWP app

Exit:
  Windows 8.1 - press Windows key 5 times
  Windows 10  - press Ctrl + Alt + Del 

Note:
  Some apps might not show up in the list of choices.
  If that happens, use PowerShell for manual set up.
  
=======================================

2.2 PowerShell set up Assigned Access (UWP)
-------------------------------------

NAME
    Set-AssignedAccess

SYNTAX
    Set-AssignedAccess -AppName <String> -UserName <String> [-Confirm] [-WhatIf] [<CommonParameters>]
    
    Set-AssignedAccess -AppName <String> -UserSID <String> [-Confirm] [-WhatIf] [<CommonParameters>]
    
    Set-AssignedAccess -AppUserModelId <String> -UserName <String> [-Confirm] [-WhatIf] [<CommonParameters>]
    
    Set-AssignedAccess -AppUserModelId <String> -UserSID <String> [-Confirm] [-WhatIf] [<CommonParameters>]
    
DESCRIPTION
    The Set-AssignedAccess cmdlet configures the specified user account so that it can use only one Windows Store app. 
    The user cannot exit the app, sign out, or access any system settings.
    
Undo:
    To remove Assigned Access using PowerShell, use the Clear-AssignedAccess cmdlet.

Note:
    To use Set-AssignedAccess need to know 1. (UserName or UserSID), and 2. (AppName or AppUserModelId)
    1. To find a UserSID use PowerShell command "Get-WmiObject win32_useraccount"
    2. To find an AppUserModelId use the listAumids method from Microsoft documentation.
       (Run the printAumids.ps1 script in the util folder, it prints a .txt file with every Aumid)
      
=======================================

3. Shell Launcher (Win32)
-----------------

Requirements:
  Windows 10 - Education or Enterprise

Restrictions:
  * Cannot use Eshell.exe as a custom shell 
  * Cannot use a Universal Windows app as a custom shell
  * Cannot use a custom shell to launch Universal Windows apps
  * Cannot use an application that launches a different process and exits as a custom shell

Enable: To make the setting available to the device and optionally apply the settings to the device.
  * Control Panel -> programs and features -> turn windows features on or off
  * WESL_UserSetting
  * DISM
  * Windows Configuration Designer
  (used control panel, could not get DISM script running)   
    
Configure: To customize the setting or sub-settings.
  * Assigned Access Configuration Service Provider (CSP)
  * Use the Shell Launcher WMI providers directly in a PowerShell script or application

Script: 
  * Start with the default template and modify to fit needs

Note: 
  * Shell Launcher is an optional component and is not turned on by default in Windows 10. 
    It must be turned on prior to configuring.
  * Changing the shell settings can alter the functionality of the operating system.
  * If running on non-Enterprise or non-Education then will load to a basically unusable black screen with no taskbar.
 
=======================================

Conclusion
----------

Satisfactory:
  * Group Policy && Scripts is a complete solution, it allows a minimized Chrome window to be run and respawned.
    This solution was tested and worked correctly on Windows 7, 8.1, and 10 Pro edition
    This requires careful manual configuration since many things must be restricted or hidden.
    However, with proper configuration this seems like the most stable and secure option to use.

Possibly Satisfactory:  
  * Assigned Access is not practical for Chrome since it only works with UWP apps, and because Google Chrome a Win32 app, it cannot be used.
    However,
      On Windows 8.1, Internet Explorer can be used with Assigned Access.
      On Windows 10, Microsoft Edge can be used with Assigned Access if set through PowerShell.
    But, according to Microsoft documentation for Windows 10: 
      "Microsoft Edge and any third-party web browsers that can be set as a default browser have special permissions 
       beyond that of most Windows apps. Microsoft Edge is not currently supported for assigned access."

  * Shell Launcher would probably be practical if running on Enterprise or Education distributions of Windows.
    However, since running Windows 10 Pro, it does not correctly work so we cannot fully test solution.

Unsatisfactory: 
  * See error_log.txt for more information.
    
=======================================

